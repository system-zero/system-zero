import ("dir")
import ("path")
import ("file")

var name = __file__: path_basename_sans_extname ()
var spec = New PackmanSpec (name)

spec.set.version ("0.1")
spec.set.descr ("Copy necessary libraries from the host")
spec.set.license ("GPL2")

var map[1] build = [
  New PackmanBuild (null, PACKMAN_BUILD_EVAL, `
    var cwd = Dir.current ()

    var string[12] libs = [
      "/lib/ld-linux.so.2": file_readlink (),
      "/lib/ld-linux-x86-64.so.2" : file_readlink (),
      "/lib/libc.so.6": file_readlink (),
      "libc.so",
      "libc.a",
      "libc_nonshared.a",
      "/lib/libm.so.6": file_readlink (),
      "libm.a",
      "/lib/libdl.so.2": file_readlink (),
      "libdl.a",
      "/lib/libutil.so.1": file_readlink (),
      "libutil.a"
    ]

    var string[18] links = [
      libs[0],        "ld-linux.so.2",
      libs[1],        "ld-linux.so.2",
      libs[2],        "libc.so.6",
      libs[6],        "libm.so.6",
      "libm.so.6",    "libm.so",
      libs[8],        "libdl.so.2",
      "libdl.so.2",   "libdl.so",
      libs[10],       "libutil.so.1",
      "libutil.so.1", "libutil.so"
    ]

    func install_libs () {
      for |v| in libs {
        continue if v is null
        continue ifnot ("/lib/" + v): file_exists ()
        return notok if notok is File.copy ("/lib/" + v, this.libdir; verbose : 2, force : 1, preserve : 1)
      }

      return ok
    }

    func install_links () {
      for |i, v| in links {
        i += 1
        continue if v is null
        return notok if notok is v: file_symlink (this.libdir + "/" + links[i]; verbose : 2, force : 1)
      }

      return ok
    }

    __retval = install_libs ()
    if ok is __retval then __retval = install_links ()

    Dir.change (cwd)
  `S4)
]

spec.set.build (build)

return spec
