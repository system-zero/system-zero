import ("io")
import ("std")
import ("path")
import ("file")
include ("argparse")

const basename = Path.basename
const isatty   = Io.fd.isatty
const read     = Io.fd.read

var me = __file__: basename ()

var argparse = New Argparse (3, 0, me + " filename")
argparse.add ("mode", 'm', "mode=", "mode in octal (default: 0600)", IntegerType, ARG_VALUE_REQUIRED)
argparse.add ("verbose", 'v', "verbose", "be verbose", BooleanType, 0)
argparse.add ("help", 'h', "help", "show this message", BooleanType, 0)

ifnot ok is argparse.process (__argv, 1) then exit (1)

if argparse.exit is true then exit (0)

var verbose = argparse.results.verbose
var mode    = argparse.results.mode

var fnames = null

ifnot argparse.argc {
  if STDIN_FILENO: isatty () {
    argparse.usage ()
    exit (1)
  }

  # SYNTAX: do ... if expr

  var std_inp = read (STDIN_FILENO)
  if null is std_inp then exit (1)

  fnames = std_inp: tokenize (" ")

} else {
  fnames = string[0]
  for v in argparse.argv append v in fnames
}

ifnot (fnames: len ()) {
  println (stderr, "${%s, prog}: missing filename argument")
  exit (0)
}

var retval = 0
var exitval = 0

for v in fnames {
  retval = v:file_new (mode; verbose : verbose)
  exitval = if retval is notok then 1 orelse exitval
}

return exitval
