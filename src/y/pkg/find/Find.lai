import ("path")
import ("find")
include ("argparse")

var me = __file__: path_basename ()

var argparse = New Argparse (20, 0, me + " [option[s]] file[s]|dir[s]")
argparse.add ("sort_by_size",  0, "sort-by-size",  "sort by size",  BooleanType, 0)
argparse.add ("sort_by_mtime", 0, "sort-by-mtime", "sort by mtime", BooleanType, 0)
argparse.add ("sort_by_atime", 0, "sort-by-atime", "sort by atime", BooleanType, 0)
argparse.add ("sort_by_ctime", 0, "sort-by-ctime", "sort by ctime", BooleanType, 0)
argparse.add ("tostdout", 0, "tostdout", "print as soon as possible without sorting", BooleanType, 0)
argparse.add ("reverse", 0, "reverse", "sort in reverse order", BooleanType, 0)
argparse.add ("dirs", 0, "directories", "list directories", BooleanType, 0)
argparse.add ("lnks", 0, "links", "list symbolic links", BooleanType, 0)
argparse.add ("socks", 0, "sockets", "list sockets", BooleanType, 0)
argparse.add ("chrs", 0, "character-devices", "list character devices", BooleanType, 0)
argparse.add ("fifos", 0, "fifos", "list fifos (named pipes)", BooleanType, 0)
argparse.add ("blks", 0, "block-devices", "list block devices", BooleanType, 0)
argparse.add ("regs", 0, "files", "list regular files", BooleanType, 0)
argparse.add ("donot_show_hidden", 0, "donot-show-hidden", "do not show hidden (default yes)", BooleanType, 0)
argparse.add ("only_executables", 0, "executable", "list only executables", BooleanType, 0)
argparse.add ("match_uid", 0, "uid=", "list only files that match uid", IntegerType, ARG_VALUE_REQUIRED; defval : -1)
argparse.add ("match_gid", 0, "gid=", "list only files that match gid", IntegerType, ARG_VALUE_REQUIRED; defval : -1)
argparse.add ("pat", 0, "pat=", "show files that match pattern", StringType, ARG_VALUE_REQUIRED)
argparse.add ("max_depth", 0, "max-depth=", "maximum depth, 1 means find files only in the fiven directory (default is 100)", IntegerType, ARG_VALUE_REQUIRED; defval : 100) 
argparse.add ("help", 'h', "help", "show this message", BooleanType, 0)

ifnot ok is argparse.process (__argv, 1) then exit (1)

if argparse.exit is true then exit (0)

var object = ifnot argparse.argc then "." orelse argparse.argv[0] end

var qualif = {
  sort_by_size     : argparse.results.sort_by_size
  sort_by_mtime    : argparse.results.sort_by_mtime
  sort_by_atime    : argparse.results.sort_by_atime
  sort_by_ctime    : argparse.results.sort_by_ctime
  tostdout         : argparse.results.tostdout
  hidden           : argparse.results.donot_show_hidden is 0
  pat              : argparse.results.pat
  reverse          : argparse.results.reverse
  executable       : argparse.results.only_executables
  uid              : argparse.results.match_uid
  gid              : argparse.results.match_gid
  max_depth        : if argparse.results.max_depth is 0 then -1 orelse argparse.results.max_depth end
}

var types = ""
if argparse.results.dirs  then append "d" in types
if argparse.results.chrs  then append "c" in types
if argparse.results.fifos then append "p" in types
if argparse.results.blks  then append "b" in types
if argparse.results.regs  then append "f" in types
if argparse.results.lnks  then append "l" in types
if argparse.results.socks then append "s" in types

ifnot types: len () then types = null

var intOrarray = object: find_dir (types; qualif)

if argparse.results.tostdout then exit (intOrarray)

if null is intOrarray then exit (1)

for v in intOrarray println (v)

exit (0)
