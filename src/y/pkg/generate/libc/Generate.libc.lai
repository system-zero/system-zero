import ("io")
import ("sys")
import ("dir")
import ("std")
import ("file")
import ("path")

include ("argparse")

  const
  is_directory   = dir_is_directory,
  realpath       = path_real,
  extname        = path_extname,
  dirname        = path_dirname,
  concat_with    = path_concat,
  basename       = path_basename,
  filelines      = file_readlines,
  mkdir          = dir_make,
  basename_without_extname = path_basename_sans_extname

  public const func generate_libc (argc, argv) {

  const
  Y           = "y",
  PKG         = "pkg",
  LIBCSRCNAME = "libc",
  LIBCOUTNAME = "libc",
  SRCDIR      = Sys.get ("SRCDIR"),
  SYSDIR      = Sys.get ("SYSDIR"),
  YSRCDIR     = SRCDIR: concat_with (Y),
  YPKGDIR     = YSRCDIR: concat_with (PKG),
  LIBCDIR     = YPKGDIR: concat_with (LIBCSRCNAME),
  LIBCSRCDIR  = LIBCDIR: concat_with (LIBCSRCNAME),
  LIBCOUTDIR  =  SYSDIR: concat_with ("include/z")

  const string[19] libcdirs = [
    "syscall", "std", "ctype", "signal", "stdlib", "string", "sys", "unistd",
    "time", "error", "convert", "utf8", "file", "fs", "dev",
    "stdio", "dir", "path", "rtc"]

  const
  metapkg_str    = "MetaPackage",
  metapkg_len    = metapkg_str: len (),
  provide_str    = " provides: ",
  require_str    = "// requires: ",
  comment_str    = "// comment: ",
  end_str        = "// end",
  end_len        = end_str: len (),
  as_str         = "// as: "

  var me = __file__: basename ()
  var argparse = New Argparse (4, 0, me)
  argparse.add ("outputName",  0,  "outputName=",  "set output file name (default " + LIBCOUTNAME + ")",  StringType, ARG_VALUE_REQUIRED)
  argparse.add ("outputDir", 0, "outputDir=", "set output directory name (default " + LIBCOUTDIR + ")", StringType, ARG_VALUE_REQUIRED)
  argparse.add ("verbose", 'v', "verbose", "set verbosity", BooleanType, 0)
  argparse.add ("help", 'h', "help",  "show this message", BooleanType, 0)

  argparse.set.help (`Reserved tokens
    // as: [header name], else it is constructed as dir/unit in caps, and should be at the first line only 
    // provides: [function signature], it is required when the unit is a function, and should be at the first line only or after an as token
    // requires: [dir/unit]
    // comment: 
    // end [ends the interpretation]
  `S4)

  return notok ifnot ok is argparse.process (argv, 1)

  return ok if argparse.exit is true

  var verbose = argparse.results.verbose

  var outputName = if null is argparse.results.outputName then LIBCOUTNAME orelse argparse.results.outputName
  var outputDir  = if null is argparse.results.outputDir then LIBCOUTDIR orelse argparse.results.outputDir

  ifnot outputDir: file_exists () then mkdir (outputDir, 0755; verbose : verbose)
  ifnot outputDir: is_directory () then return error (outputDir + ": is not a directory")

  var outputFile  = outputDir: concat_with (outputName + ".h")
  var licenceFile = outputDir: concat_with ("Licenses_libc")
  var commentFile = outputDir: concat_with ("Comments_libc")

  var dotsToLibc = func (d) {
    var def = LIBCSRCDIR
    return def if d: path_is_absolute ()

    var s = ""
    var p = d: tokenize ("/")
    for (var i = 0; i < p: len (); i++) {
      if i append "/" in s
      append ".." in s
    }

    append LIBCSRCNAME: concat_with (LIBCSRCNAME) in s
    return s
  } (outputDir)

  var funcSigns = "\n/* Function Signatures */\n"
  var libcFuns  = "\n"
  var libcTypes = "\n    /* Types */\n"
  var licenses  = "\n    /* LICENSES */\n\n"
  var comments  = "\n    /* Comments */\n\n"
  var libcHdrs  =
   `/* Amalgamation oversimplified tiny libc for x86 and x86_64 */
    /* You get only what you only want, with a without magic code. */

    #ifndef LIBC_HDR
    #define LIBC_HDR

    #ifndef REQUIRE_STD_H
    #define REQUIRE_STD_H
    #endif

    #ifndef REQUIRE_ERRNO_H
    #define REQUIRE_ERRNO_H
    #endif

    #ifndef REQUIRE_ERRORS_H
    #define REQUIRE_ERRORS_H
    #endif

    #ifndef REQUIRE_ERROR_LIST_H
    #define REQUIRE_ERROR_LIST_H
    #endif

    #ifndef REQUIRE_ERRNO_STRING
    #define REQUIRE_ERRNO_STRING
    #endif

    // include unconditionally - no reason not to - some functions signatures thy like va_list
    #ifndef REQUIRE_STDARG_H
    #define REQUIRE_STDARG_H
    #endif

    #ifdef OK
    #undef OK
    #endif

    #ifdef NOTOK
    #undef NOTOK
    #endif

    #ifdef ifnot
    #undef ifnot
    #endif

    #ifdef is
    #undef is
    #endif

    #ifdef isnot
    #undef isnot
    #endif

    #ifdef or
    #undef or
    #endif

    #ifdef and
    #undef and
    #endif

    #define OK     0
    #define NOTOK -1
    #define is    ==
    #define isnot !=
    #define or    ||
    #define and   &&
    #define ifnot(__expr__) if (0 == (__expr__))

    #ifdef private
    #undef private
    #endif

    #ifdef public
    #undef public
    #endif

    #ifdef UNUSED
    #undef UNUSED
    #endif

    #define private __attribute__ ((visibility ("hidden")))
    #define public  __attribute__ ((visibility ("default")))
    #define UNUSED  __attribute__ ((unused))


    #ifndef WITHOUT_Z_ENV
      #ifndef REQUIRE_Z_ENV_H
        #define REQUIRE_Z_ENV_H
      #endif
    #endif

    /* Interfaces */

    #ifdef REQUIRE_FD_INTERFACE
      #define REQUIRE_OPEN
      #define REQUIRE_WRITE
      #define REQUIRE_CLOSE
    #endif

    /* Tracking Dependencies */

  `S4

  var filelist = {}

  Type Func {
    abspath
    header
    basedir
    endidx
    exttype
    funname
    depends

    init : func (abspath, header, basedir, endidx, exttype, funname) {
      this.abspath = abspath
      this.header  = header
      this.basedir = basedir
      this.endidx  = endidx
      this.exttype = exttype
      this.funname = funname
      this.depends = string[0]
    }
  } 

  func error (msg) {
    ifnot null is msg then println (stderr, msg)
    if errno then println (errno_string (errno))
    return notok
  }

  for v in libcdirs {
    if v isnot "syscall" append format ("/* ${v} */") in libcFuns
    var dir = LIBCSRCDIR: concat_with (v)
    var arr = dir: dir_list ()

    for f in arr {
      var fn = dir: concat_with (f)
      var lines = fn: filelines ()

      if f: eq_n ("LICENSE_", 8) {
        var sp = f: advance_after_bytes ("LICENSE_", 1)
        append format ("/* ${sp} License */\n") in licenses
        for line in lines append line + "\n" in licenses
        append "\n" in licenses
        continue
      }

      if "syscall.c" is f {
        append "#ifndef SYSCALL_P\n#define SYSCALL_P\n" in funcSigns
        append "long syscall0 (long);\n" in funcSigns
        append "long syscall1 (long, long);\n" in funcSigns
        append "long syscall2 (long, long, long);\n" in funcSigns
        append "long syscall3 (long, long, long, long);\n" in funcSigns
        append "long syscall4 (long, long, long, long, long);\n" in funcSigns
        append "long syscall5 (long, long, long, long, long, long);\n" in funcSigns
        append "long syscall6 (long, long, long, long, long, long, long);\n" in funcSigns
        append "#endif /* SYSCALL_P */\n" in funcSigns

        append "/* Syscalls Implementation */\n" in libcFuns

         # so we can open it with 'gf'
        append "#ifndef SYSCALLS_D\n#define SYSCALLS_D\n" in libcFuns
        append "/* " + (dotsToLibc: concat_with ("syscall/syscall.c")) + " */\n" in libcFuns

        for line in lines append line + '\n' in libcFuns
        append "#endif /* SYSCALLS_D */\n\n" in libcFuns
        append "/* Function Implementation */\n" in libcFuns
        continue
      }

      var f_ext = f: extname (): to_upper (): advance (1)
      var f_hdr = f: basename_without_extname (): to_upper ()

      var lines_len = lines: len ()
      var idx = 0;
      var num_found = 0

      if "C" is f_ext {
        var line = lines[idx]
        var sp = line: bytes_in_str (as_str)
        var is_meta = 0;

        ifnot null is sp {
          sp := advance_after_bytes (as_str, 1)

          ifnot sp: len () then return error (v + "/" + f + ": [as] missing header name")
          f_hdr = sp: to_upper ()
          idx++
        }

        for (var i = idx; i < lines_len; i++) {
          var line = lines[idx]
          var sp = line: bytes_in_str (provide_str)

          if null is sp {
            ifnot num_found then return error (v + "/" + f + ": is missing a '// provides: ' token")
            break
          }

          num_found++

          sp := advance_after_bytes (provide_str, 1)

          ifnot sp: len () then return error (v + "/" + f + ": missing function signature")

          is_meta = sp: eq_n (metapkg_str, metapkg_len)

          ifnot is_meta {
            ifnot num_found - 1 then
              append format ("\n#ifdef REQUIRE_${f_hdr}\n#ifndef ${f_hdr}_FD\n#define ${f_hdr}_FD\n\n") in funcSigns

            append sp + if sp: eq_n ("#define ", 8) then "\n" orelse ";\n" end in funcSigns
          }

          idx++
        }

        ifnot is_meta then
          if num_found then append "\n#endif /* " + f_hdr + "_FD */\n#endif\n" in funcSigns
      }

      num_found = 0

      for (var i = idx; i < lines_len; i++) {
        var line = lines[idx]
        var sp = line: bytes_in_str (require_str)
        break if null is sp

        sp := advance_after_bytes (require_str, 1)
        var tok = sp: tokenize ("/")
        break if tok: len () < 1

        var unit = tok[-1]
        var ext = unit: extname (): to_upper (): advance (1)
        var hdr = unit: basename_without_extname () : to_upper ()

        var is_type_unit = "H" is ext

        ifnot num_found {
          append format ("#ifdef REQUIRE_${f_hdr}") in libcHdrs
          if "H" is f_ext then append "_H" in libcHdrs
          append "\n" in libcHdrs
        }

        append format ("  #ifndef REQUIRE_${hdr}") in libcHdrs
        if is_type_unit then append "_H" in libcHdrs
        append "\n" in libcHdrs
        append format ("  #define REQUIRE_${hdr}") in libcHdrs
        if is_type_unit then append "_H" in libcHdrs
        append "\n  #endif\n" in libcHdrs
        idx++
        num_found++
      }

      if num_found then append "#endif\n\n" in libcHdrs

      for (var i = idx; i < lines_len; i++) {
        var line = lines[idx]
        var sp = line: bytes_in_str (comment_str)
        break if null is sp
        sp := advance_after_bytes (comment_str, 1)
        append sp + "\n" in comments
        idx++
      }

      for (var i = idx; i < lines_len; i++) {
        break if lines[i]: len ()
        idx++
      }

      if num_found and "H" is f_ext { # handle only types as functions have been forward declared
        var new = New Func (fn, f_hdr, v, idx, f_ext, f)
        append new in filelist as f
        continue
      }

      if "H" is f_ext {
        append format ("\n#ifdef REQUIRE_${f_hdr}_H\n") in libcTypes
        append "#ifndef " + f_hdr + "_TD\n#define " + f_hdr + "_TD\n" in libcTypes
        append format ("/* ${dotsToLibc}/${v}/${f} */\n\n") in libcTypes

        for (var i = idx; i < lines_len; i++) {
          break if lines[i]: eq_n (end_str, end_len)
          append lines[i] + '\n' in libcTypes
        }

        append "\n#endif /* " + f_hdr + "_TD */\n#endif\n" in libcTypes
      } else {

        if lines_len - idx {
          append "\n#ifdef REQUIRE_" + f_hdr + "\n" in libcFuns
          append "#ifndef " + f_hdr + "_F\n#define " + f_hdr + "_F\n" in libcFuns
          append format ("/* ${dotsToLibc}/${v}/${f} */\n\n") in libcFuns

          for (var i = idx; i < lines_len; i++) {
            break if lines[i]: eq_n (end_str, end_len)
            append lines[i] + '\n' in libcFuns
          }

          append "\n#endif /* " + f_hdr + "_F */\n" in libcFuns
          append "#endif\n" in libcFuns
        }
      }
    }

    if v isnot "syscall" append format ("/* ${v} */\n\n") in libcFuns
  }

  for k, v in filelist {
    var lines = v.abspath: filelines ()
    var lines_len = lines: len ()
    var idx = v.endidx

    append "\n#ifdef REQUIRE_" + v.header + "_H\n" in libcTypes
    append "#ifndef " + v.header + "_T\n#define " + v.header + "_T\n" in libcTypes
    append format ("/* ${dotsToLibc}/${v.basedir}/${v.funname} */\n\n") in libcTypes

    for (var i = idx; i < lines_len; i++) {
      break if lines[i]: eq_n (end_str, 6)
      append lines[i] + '\n' in libcTypes
    }

    append "#endif /* " + v.header + "_T */\n#endif\n" in libcTypes
  }

  append "#endif /* LIBC_HDR */\n" in libcFuns

  if notok is File.write (outputFile, libcHdrs + libcTypes + funcSigns + libcFuns) then
    return error ("failed to write to " + outputfile)
  if verbose then println ("libc implementation has been written to " + outputFile)

  if notok is File.write (commentFile, comments) then
    return error ("failed to write to " + commentFile)
  if verbose then println ("comments have been written to " + commentFile)

  if notok is File.write (licenceFile, licenses) then
    return error ("failed to write to " + licenceFile)
  if verbose then println ("licences have been written to " + licenceFile)

  return ok
}
