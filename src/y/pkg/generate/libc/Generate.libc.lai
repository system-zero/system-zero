import ("io")
import ("sys")
import ("dir")
import ("std")
import ("file")
import ("path")

include ("argparse")

  const
  mkdir          = dir_make,
  is_directory   = dir_is_directory,
  realpath       = path_real,
  extname        = path_extname,
  dirname        = path_dirname,
  concat_with    = path_concat,
  basename       = path_basename,
  filelines      = file_readlines,
  exists         = file_exists,
  basename_without_extname = path_basename_sans_extname

  public const func generate_libc (argc, argv) {

  const
  Y           = "y",
  Z           = "z",
  PKG         = "pkg",
  LIBCSRCNAME = "libc",
  LIBCOUTNAME = "libc",
  SRCDIR      = Sys.get ("SRCDIR"),
  SYSDIR      = Sys.get ("SYSDIR"),
  YSRCDIR     = SRCDIR: concat_with (Y),
  YPKGDIR     = YSRCDIR: concat_with (PKG),
  LIBCDIR     = YPKGDIR: concat_with (LIBCSRCNAME),
  LIBCSRCDIR  = LIBCDIR: concat_with (LIBCSRCNAME),
  LIBCALLDIR =  LIBCSRCDIR : concat_with ("libc"),
  SYSBINDIR   = SYSDIR: concat_with ("bin"),
  SYSLIBDIR   = SYSDIR: concat_with ("lib"),
  ZSYSLIBDIR  = SYSLIBDIR: concat_with (Z),
  SYSINCDIR   = SYSDIR: concat_with ("include"),
  ZSYSINCDIR  = SYSINCDIR: concat_with (Z),
  SYSSHAREDDIR= SYSDIR: concat_with ("share"),
  SYSMANPATH  = "/share/man:" + SYSSHAREDDIR: concat_with ("man") + ":/usr/local/share/man:/usr/share/man",
  LIBCOUTDIR  = ZSYSINCDIR

  const string[22] libcdirs = [
    "syscall", "std", "stdio", "stdlib", "ctype", "signal", "string", "sys",
    "unistd",  "time", "error", "convert", "utf8", "file", "fs", "dev",
    "dir", "path", "rtc", "map", "term", "mem"]

  const
  metapkg_str    = "MetaPackage",
  metapkg_len    = metapkg_str: len (),
  provide_str    = " provides: ",
  require_str    = "// requires: ",
  comment_str    = "// comment: ",
  end_str        = "// end",
  end_len        = end_str: len (),
  as_str         = "// as: "

  var me = __file__: basename ()
  var argparse = New Argparse (7, 0, me)
  argparse.add ("outputName",  0,  "outputName=",  "set output file name (default " + LIBCOUTNAME + ")",  StringType, ARG_VALUE_REQUIRED)
  argparse.add ("outputDir", 0, "outputDir=", "set output directory name (default " + LIBCOUTDIR + ")", StringType, ARG_VALUE_REQUIRED)
  argparse.add ("withoutSys", 0, "without-sys-headers", "do not write specific to this system headers", BooleanType, 0)
  argparse.add ("withoutModCompat", 0, "without-module-compat", "do not output module compatibility code", BooleanType, 0)
  argparse.add ("allocator", 0, "allocator=", "select allocator [ALLOC, ZALLOC] (default ALLOC)", StringType, ARG_VALUE_REQUIRED; defval : "ALLOC")
  argparse.add ("verbose", 'v', "verbose", "set verbosity", BooleanType, 0)
  argparse.add ("help", 'h', "help",  "show this message", BooleanType, 0)

  argparse.set.help (`Reserved tokens
    // as: [header name], else it is constructed as dir/unit in caps, and should be at the first line only 
    // provides: [function signature], it is required when the unit is not a header and is not a MetaPackage (should be at the first line only or after an as token)
    // requires: [dir/unit]
    // comment: 
    // end [ends the interpretation]
  `S4)

  return notok ifnot ok is argparse.process (argv, 1)

  return ok if argparse.exit is true

  var verbose = argparse.results.verbose

  var outputName = if null is argparse.results.outputName then LIBCOUTNAME orelse argparse.results.outputName
  var outputDir  = if null is argparse.results.outputDir then LIBCOUTDIR orelse argparse.results.outputDir

  ifnot outputDir: exists () then mkdir (outputDir, 0755; verbose : verbose)
  ifnot outputDir: is_directory () then return error (outputDir + ": is not a directory")

  var outputFile  = outputDir: concat_with (outputName + ".h")
  var licenceFile = outputDir: concat_with ("Licenses_libc")
  var commentFile = outputDir: concat_with ("Comments_libc")

  ifnot LIBCALLDIR: exists () then mkdir (LIBCALLDIR, 0755; verbose : verbose)
  ifnot LIBCALLDIR: is_directory () then return error (LIBCALLDIR + ": is not a directory")

  const outputFileLibcAll = LIBCALLDIR: concat_with ("libc.c")

  var withoutSysHdrs = argparse.results.withoutSys

  var memoryAllocator = argparse.results.allocator
  var memoryAllocators = ["ALLOC", "ZALLOC"]

  var dotsToLibc = func (d) {
    var def = LIBCSRCDIR
    return def if d: path_is_absolute ()

    var s = ""
    var p = d: tokenize ("/")
    for (var i = 0; i < p: len (); i++) {
      if i append "/" in s
      append ".." in s
    }

    append LIBCSRCNAME: concat_with (LIBCSRCNAME) in s
    return s
  } (outputDir)

  var funcSigns = "\n/* Function Signatures */\n"
  var libcFuns  = "\n"
  var libcTypes = "\n    /* Types */\n"
  var licenses  = "\n    /* LICENSES */\n\n"
  var comments  = "\n    /* Comments */\n\n"
  var libcAllC  = ""

  var libcHdrs  =
   `/* This is an oversimplified tiny libc for x86 and x86_64 in a single unit.
     * You get only what you only want, with a without magic code. */

    #ifndef LIBC_HDR
    #define LIBC_HDR

    #ifndef __WORDSIZE
      #if defined(__x86_64__) || defined(__amd64__) || defined(__amd64)
      #define __WORDSIZE    64
      #elif defined(__i386__) || defined(__i386)
      #define __WORDSIZE    32
      #else
      #error "unimplemented platform"
      #endif
    #endif

    #ifndef WITHOUT_INT_H
      #ifndef REQUIRE_INT_H
      #define REQUIRE_INT_H
      #endif
    #endif

    /* sys_errno */
    #ifndef REQUIRE_ERRNO_H
    #define REQUIRE_ERRNO_H
    #endif

    #ifndef WITHOUT_STD_H
      #ifndef REQUIRE_STD_H
      #define REQUIRE_STD_H
      #endif
    #endif

    #ifndef WITHOUT_ERROR
      #ifndef REQUIRE_ERRORS_H
      #define REQUIRE_ERRORS_H
      #endif

      #ifndef REQUIRE_ERROR_LIST_H
      #define REQUIRE_ERROR_LIST_H
      #endif

      #ifndef REQUIRE_ERRNO_STRING
      #define REQUIRE_ERRNO_STRING
      #endif
    #endif

    #ifndef WITHOUT_STDARG_H
      #ifndef REQUIRE_STDARG_H
      #define REQUIRE_STDARG_H
      #endif
    #endif

    #ifndef WITHOUT_SYNTAX
      #ifndef SYNTAX_H
      #define SYNTAX_H

      #ifdef ifnot
      #undef ifnot
      #endif
      #define ifnot(__expr__) if (0 == (__expr__))
      #endif /* SYNTAX_H */
    #endif

    #ifndef private
    #define private __attribute__ ((visibility ("hidden")))
    #endif

    #ifndef public
    #define public  __attribute__ ((visibility ("default")))
    #endif

    #ifndef UNUSED
    #define UNUSED  __attribute__ ((unused))
    #endif

  `S4

  ifnot withoutSysHdrs {
    append "#ifndef WITHOUT_SYS_CONSTANTS\n"               in libcHdrs
    append "  #ifndef SYS_CONSTANTS_H\n"                   in libcHdrs
    append "  #define SYSDIR \""   + SYSDIR       + "\"\n" in libcHdrs
    append "  #define SHAREDIR \"" + SYSSHAREDDIR + "\"\n" in libcHdrs
    append "  #define LIBDIR \""   + SYSLIBDIR    + "\"\n" in libcHdrs
    append "  #define ZLIBDIR \""  + ZSYSLIBDIR   + "\"\n" in libcHdrs
    append "  #define INCDIR \""   + SYSINCDIR    + "\"\n" in libcHdrs
    append "  #define ZINCDIR \""  + ZSYSINCDIR   + "\"\n" in libcHdrs
    append "  #define BINDIR \""   + SYSBINDIR    + "\"\n" in libcHdrs
    append "  #define MANPATH \""  + SYSMANPATH   + "\"\n" in libcHdrs
    append "  #endif /* SYS_CONSTANTS_H */\n\n"            in libcHdrs
    append "#endif /* WITHOUT_SYS_CONSTANTS */\n\n"        in libcHdrs
  }

  append "/* Tracking Dependencies */\n" in libcHdrs
  const dependencies_beg = libcHdrs: len ()

  var filelist = {}

  Type Func {
    abspath
    header
    basedir
    endidx
    exttype
    funname
    depends

    init : func (abspath, header, basedir, endidx, exttype, funname) {
      this.abspath = abspath
      this.header  = header
      this.basedir = basedir
      this.endidx  = endidx
      this.exttype = exttype
      this.funname = funname
      this.depends = string[0]
    }
  } 

  func error (msg) {
    ifnot null is msg then println (stderr, msg)
    if errno then println (errno_string (errno))
    return notok
  }

  for v in libcdirs {
    if v isnot "syscall"  append format ("/* ${v} */") in libcFuns

    var dir = LIBCSRCDIR: concat_with (v)
    var arr = dir: dir_list ()

    for f in arr {
      var fn = dir: concat_with (f)
      var lines = fn: filelines ()

      if f: eq_n ("LICENSE_", 8) {
        var sp = f: advance_after_bytes ("LICENSE_", 1)
        append format ("/* ${sp} License */\n") in licenses
        for line in lines append line + "\n" in licenses
        append "\n" in licenses
        continue
      }

      if "syscall.c" is f {
        append "#ifndef SYSCALL_P\n#define SYSCALL_P\n" in funcSigns
        append "long syscall0 (long);\n" in funcSigns
        append "long syscall1 (long, long);\n" in funcSigns
        append "long syscall2 (long, long, long);\n" in funcSigns
        append "long syscall3 (long, long, long, long);\n" in funcSigns
        append "long syscall4 (long, long, long, long, long);\n" in funcSigns
        append "long syscall5 (long, long, long, long, long, long);\n" in funcSigns
        append "long syscall6 (long, long, long, long, long, long, long);\n" in funcSigns
        append "#endif /* SYSCALL_P */\n" in funcSigns

        append "/* Syscalls Implementation */\n" in libcFuns

         # so we can open it with 'gf'
        append "#ifndef SYSCALLS_D\n#define SYSCALLS_D\n" in libcFuns
        append "/* " + (dotsToLibc: concat_with ("syscall/syscall.c")) + " */\n" in libcFuns

        for line in lines
          append line + '\n' in libcFuns

        append "#endif /* SYSCALLS_D */\n\n" in libcFuns
        append "/* Function Implementation */\n" in libcFuns
        continue
      }

      var f_unit = f: basename ()
      var f_ext  = f: extname (): to_upper (): advance (1)
      var f_name = f: basename_without_extname ()
      var f_hdr  = f_name: to_upper ()

      var f_is_allocator = 0
      for v in memoryAllocators
        if v: eq (f_hdr)
          f_is_allocator = 1;

      if f_is_allocator
        ifnot memoryAllocator: eq (f_hdr)
          continue;

      var lines_len = lines: len ()
      var idx = 0;
      var num_found = 0

      if "C" is f_ext {
        var line = lines[idx]
        var sp = line: bytes_in_str (as_str)
        var is_meta = 0;

        ifnot null is sp {
          sp := advance_after_bytes (as_str, 1)

          ifnot sp: len () then return error (v + "/" + f + ": [as] missing header name")
          f_hdr = sp: to_upper ()
          idx++
        }

        for (var i = idx; i < lines_len; i++) {
          var line = lines[idx]
          var sp = line: bytes_in_str (provide_str)

          if null is sp {
            ifnot num_found then return error (v + "/" + f + ": is missing a '// provides: ' token")
            break
          }

          num_found++

          sp := advance_after_bytes (provide_str, 1)

          ifnot sp: len () then return error (v + "/" + f + ": missing function signature")

          is_meta = sp: eq_n (metapkg_str, metapkg_len)

          ifnot is_meta {
            ifnot num_found - 1 then
              append format ("\n#ifdef REQUIRE_${f_hdr}\n#ifndef ${f_hdr}_FD\n#define ${f_hdr}_FD\n\n") in funcSigns

            append sp + if sp: eq_n ("#define ", 8) then "\n" orelse ";\n" end in funcSigns
          }

          idx++
        }

        ifnot is_meta then
          if num_found then append "\n#endif /* " + f_hdr + "_FD */\n#endif\n" in funcSigns
      }

      num_found = 0

      for (var i = idx; i < lines_len; i++) {
        var line = lines[idx]
        var sp = line: bytes_in_str (require_str)
        break if null is sp

        sp := advance_after_bytes (require_str, 1)

        var req = LIBCSRCDIR: concat_with (sp)
        ifnot req: exists ()
          println (stderr, "\e[31mWarning: ${v}/${f_unit} requires ${sp} which is missing\e[m") 

        var tok = sp: tokenize ("/")
        break if tok: len () < 1

        var unit = tok[-1]
        var ext = unit: extname (): to_upper (): advance (1)
        var hdr = unit: basename_without_extname () : to_upper ()

        var is_type_unit = "H" is ext

        ifnot num_found {
          append format ("#ifdef REQUIRE_${f_hdr}") in libcHdrs
          if "H" is f_ext then append "_H" in libcHdrs
          append "\n" in libcHdrs
        }

        var h_is_allocator = 0
        for v in memoryAllocators
          if v: eq (hdr)
            h_is_allocator = 1

        if h_is_allocator then
          append format ("  #ifndef REQUIRE_${memoryAllocator}") in libcHdrs
        orelse
          append format ("  #ifndef REQUIRE_${hdr}") in libcHdrs

        if is_type_unit then append "_H" in libcHdrs
        append "\n" in libcHdrs

        if h_is_allocator then
          append format ("  #define REQUIRE_${memoryAllocator}") in libcHdrs
        orelse
          append format ("  #define REQUIRE_${hdr}") in libcHdrs

        if is_type_unit then append "_H" in libcHdrs
        append "\n  #endif\n" in libcHdrs
        idx++
        num_found++
      }

      if num_found then append "#endif\n\n" in libcHdrs

      var num_comments = 0
      for (var i = idx; i < lines_len; i++) {
        var line = lines[idx]
        var sp = line: bytes_in_str (comment_str)
        break if null is sp

        ifnot num_comments
          append "/* " + f_name + ":\n" in comments

        num_comments++

        sp := advance_after_bytes (comment_str, 1)
        append " * " + sp + "\n" in comments
        idx++
      }

      if num_comments
        append " */\n\n" in comments

      for (var i = idx; i < lines_len; i++) {
        break if lines[i]: len ()
        idx++
      }

      if num_found and "H" is f_ext { # handle only types as functions have been forward declared
        var new = New Func (fn, f_hdr, v, idx, f_ext, f)
        append new in filelist as f
        continue
      }

      if "H" is f_ext {
        append format ("\n#ifdef REQUIRE_${f_hdr}_H\n") in libcTypes

        append format ("#define REQUIRE_${f_hdr}_H\n") in libcAllC

        append "#ifndef " + f_hdr + "_TD\n#define " + f_hdr + "_TD\n" in libcTypes
        append format ("/* ${dotsToLibc}/${v}/${f} */\n\n") in libcTypes

        for (var i = idx; i < lines_len; i++) {
          break if lines[i]: eq_n (end_str, end_len)
          append lines[i] + '\n' in libcTypes
        }

        append "\n#endif /* " + f_hdr + "_TD */\n#endif\n" in libcTypes
      } else {

        if lines_len - idx {
          append "\n#ifdef REQUIRE_" + f_hdr + "\n" in libcFuns

          append "#define REQUIRE_" + f_hdr + "\n" in libcAllC

          append "#ifndef " + f_hdr + "_F\n#define " + f_hdr + "_F\n" in libcFuns
          append format ("/* ${dotsToLibc}/${v}/${f} */\n\n") in libcFuns

          for (var i = idx; i < lines_len; i++) {
            break if lines[i]: eq_n (end_str, end_len)
            append lines[i] + '\n' in libcFuns
          }

          append "\n#endif /* " + f_hdr + "_F */\n" in libcFuns
          append "#endif\n" in libcFuns
        }
      }
    }

    if v isnot "syscall"
      append format ("/* ${v} */\n\n") in libcFuns
  }

  for k, v in filelist {
    var lines = v.abspath: filelines ()
    var lines_len = lines: len ()
    var idx = v.endidx

    append "\n#ifdef REQUIRE_" + v.header + "_H\n" in libcTypes
    append "#ifndef " + v.header + "_T\n#define " + v.header + "_T\n" in libcTypes
    append format ("/* ${dotsToLibc}/${v.basedir}/${v.funname} */\n\n") in libcTypes

    for (var i = idx; i < lines_len; i++) {
      break if lines[i]: eq_n (end_str, 6)
      append lines[i] + '\n' in libcTypes
    }

    append "#endif /* " + v.header + "_T */\n#endif\n" in libcTypes
  }

  append "#endif /* LIBC_HDR */\n" in libcFuns

# is ugly i know
  ifnot true is argparse.results.withoutModCompat {
    append `
/* do not really belong here (generate with --without-module-compat to avoid this) */
#ifdef REQUIRE_MODULE_COMPAT
#include <z/stringt.h>
typedef string_t string;
#include <z/vstring.h>
#include <z/vmap.h>
#include <z/la.h>
static  la_T __LA__;	
#define La   __LA__.self

#ifndef EvalString
#define EvalString(...) #__VA_ARGS__
#endif

#ifndef MODULE
#define MODULE(_name_)                                      \
  public int __init_ ## _name_ ## _module__ (la_t *);       \
  public void __deinit_ ## _name_ ## _module__ (la_t *);
#endif

#ifndef __INIT_MODULE__
#define __INIT_MODULE__(__l__)   \
do {                             \
  __LA__ = *la_get_root (__l__); \
} while (0)
#endif

#ifndef __INIT__
#define __INIT__(_T_) _T_ ## Type = __init_ ## _T_ ## __ ()
#endif

#ifdef REQUIRE_STRING_TYPE_COMPAT
static  string_T stringType;
#define String   stringType.self
#endif

#ifdef REQUIRE_VMAP_TYPE_COMPAT
static  vmap_T vmapType;
#define Vmap   vmapType.self
#endif

#endif /* REQUIRE_MODULE_COMPAT */
` in libcFuns
}
  if notok is File.write (outputFile, libcHdrs) then
    return error ("failed to write to " + outputfile)

  var hdrs = "/* Retracking (required at cases at least two passes, and might exist\n" +
             " * combinations that may need three, but we use two).\n" +
             " * Otherwise we can get them right if we re'require them, from the compilation unit.\n */\n\n"
  hdrs += libcHdrs: advance (dependencies_beg) 

  if notok is File.append (outputFile, hdrs) then
    return error ("failed to write to " + outputfile)

  if notok is File.append (outputFile, libcTypes) then
    return error ("failed to write to " + outputfile)

  if notok is File.append (outputFile, funcSigns) then
    return error ("failed to write to " + outputfile)

  if notok is File.append (outputFile, libcFuns) then
    return error ("failed to write to " + outputfile)

  if verbose then
    println ("libc implementation has been written to " + outputFile)

  if notok is File.write (commentFile, comments) then
    return error ("failed to write to " + commentFile)

  if verbose then
    println ("comments have been written to " + commentFile)

  if notok is File.write (licenceFile, licenses) then
    return error ("failed to write to " + licenceFile)

  if verbose then
    println ("licences have been written to " + licenceFile)

  append "\n#include <z/libc.h>\n" in libcAllC
  if notok is File.write ( outputFileLibcAll, libcAllC) then
    return error ("failed to write to " + outputFileLibcAll)

  if verbose then
    println ("libc that includes everything has been written to " + outputFileLibcAll)

  return ok
}
