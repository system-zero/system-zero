#@
  depends_on ("generate/errno", MODULE)
#

var m = New Make (__file__, LIBC)

func error_exit (msg) {
  println (stderr, msg)
  return notok
}

func libc_pre_exec (s) {
  var d = "libc/error"
  ifnot d: exists () then
    if mkdir (d, 0755; verbose : 1) is notok then
      return error_exit ("can not create libc/error directory")

  ifnot d: isdirectory () then return error_exit ("libc/error is not a directrory")

  var f = d: concat_with ("errors.h")

  if f: exists () {
    ifnot f: isregular () then
      return error_exit (f + " is not a regular file")

    return ok if s.get.libc.force () is false
  }

  import ("generateerrno")

  var e = Generate.errno ()

  var write_fd = open (f, O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR|S_IROTH|S_IRGRP);
  if write_fd is null then return exit_error ("can not open(): " + f)

  for i, v in e.definitions {
    if notok is write (write_fd, "#ifndef " + v + "\n") return exit_error ("couldn't write to " + f)
    if notok is write (write_fd, "#define " + v + " " +
      if i isnot e.errors[i] then e.definitions[e.errors[i]] orelse e.errors[i]: to_string (10) end + "\n") return exit_error ("couldn't write to " + f)

    if notok is write (write_fd, "#endif /* " + v + " */\n") return exit_error ("couldn't write to " + f)
    if i + 1 isnot e.definitions: len ()
      if notok is write (write_fd, "\n") return exit_error ("couldn't write to " + f)
  }

  f = d: concat_with ("error_list.h")
  if f: exists () {
    ifnot f: isregular () then
      return error_exit (f + " is not a regular file")

    return ok if s.get.libc.force () is false
  }

  write_fd = open (f, O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR|S_IROTH|S_IRGRP);
  if write_fd is null then return exit_error ("can not open(): " + f)

  var num = e.errors: len () - 5
  if notok is write (write_fd, "// requires: error/errors.h\n\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "#define LAST_ERROR " + num: to_string (10) + "\n\n") return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "static const struct sys_errorlist_type {\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "  const char *name;\n  const char *msg;\n  int errnum;\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "} sys_errorlist[] = {\n") then return exit_error ("couldn't write to " + f)

  for i, v in e.definitions {
    if notok is write (write_fd, "  { \"" + v + "\", \"" + e.strerrors[i] + "\", " +
      if i isnot e.errors[i] then e.definitions[e.errors[i]] orelse e.errors[i]: to_string (10) end + "},\n") return exit_error ("couldn't write to " + f)
  }

  if notok is write (write_fd, "};\n\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "static int get_error_num (int errnum) {\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "  if (LAST_ERROR < errnum || errnum < 0)\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "    return EUNKNOWN;\n\n  return errnum;\n}\n") then return exit_error ("couldn't write to " + f)

  f = d: concat_with ("errno_string.c")
  if f: exists () {
    ifnot f: isregular () then
      return error_exit (f + " is not a regular file")

    return ok if s.get.libc.force () is false
  }

  write_fd = open (f, O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR|S_IROTH|S_IRGRP);
  if write_fd is null then return exit_error ("can not open(): " + f)

  if notok is write (write_fd, "// provides: char *errno_string (int)\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "// provides: char *errno_name (int)\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "// requires: error/errors.h\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "// requires: error/error_list.h\n\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "char *errno_string (int errnum) {\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "  errnum = get_error_num (errnum);\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "  return (char *) sys_errorlist[errnum].msg;\n}\n\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "char *errno_name (int errnum) {\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "  errnum = get_error_num (errnum);\n") then return exit_error ("couldn't write to " + f)
  if notok is write (write_fd, "  return (char *) sys_errorlist[errnum].name;\n}\n") then return exit_error ("couldn't write to " + f)

  return ok
}

m.set.libc.pre_exec (libc_pre_exec)

m.set.libc.source ([
  "libc/convert/decimal.h",
  "libc/convert/decimal_to_string.c",
  "libc/convert/float_to_string.c",
  "libc/convert/float_to_string.h",
  "libc/convert/format.c",
  "libc/convert/format.h",
  "libc/convert/hexstring_to_string.c",
  "libc/convert/string_to_hexstring.c",
  "libc/ctype/isalnum.c",
  "libc/ctype/isalpha.c",
  "libc/ctype/isascii.c",
  "libc/ctype/isdigit.c",
  "libc/ctype/islower.c",
  "libc/ctype/isprint.c",
  "libc/ctype/isspace.c",
  "libc/ctype/isupper.c",
  "libc/ctype/tolower.c",
  "libc/ctype/toupper.c",
  "libc/dev/blksize.c",
  "libc/dir/chdir.c",
  "libc/dir/dirent.h",
  "libc/dir/dirlist.c",
  "libc/dir/dirlist.h",
  "libc/dir/dirwalk.c",
  "libc/dir/dirwalk.h",
  "libc/dir/is_directory.c",
  "libc/dir/lnk_is_directory.c",
  "libc/dir/make_dir.c",
  "libc/dir/opendir.c",
  "libc/dir/rmdir.c",
  "libc/error/errors.h",
  "libc/error/error_list.h",
  "libc/error/errno_string.c",
  "libc/file/copy.c",
  "libc/file/copy.h",
  "libc/file/exists.c",
  "libc/file/is_executable.c",
  "libc/file/is_fifo.c",
  "libc/file/is_link.c",
  "libc/file/is_readable.c",
  "libc/file/is_reg.c",
  "libc/file/is_rwx.c",
  "libc/file/is_sock.c",
  "libc/file/is_writable.c",
  "libc/file/mode_to_string.c",
  "libc/file/readfile.c",
  "libc/file/readfile.h",
  "libc/file/remove.c",
  "libc/file/remove.h",
  "libc/file/size.c",
  "libc/fs/fs.h",
  "libc/map/map.h",
  "libc/map/map.c",
  "libc/mem/falloc.c",
  "libc/mem/falloc.h",
  "libc/mem/talloc.c",
  "libc/mem/talloc.h",
  "libc/mem/valloc.c",
  "libc/mem/valloc.h",
  "libc/mem/zalloc.c",
  "libc/mem/zalloc.h",
  "libc/path/basename.c",
  "libc/path/basename_sans_extname.c",
  "libc/path/concat.c",
  "libc/path/dirname.c",
  "libc/path/extname.c",
  "libc/path/is_absolute.c",
  "libc/path/realpath.c",
  "libc/rtc/rtc.h",
  "libc/signal/kill.c",
  "libc/signal/raise.c",
  "libc/signal/sigaction.c",
  "libc/signal/sigaction.h",
  "libc/signal/sigaddset.c",
  "libc/signal/sigemptyset.c",
  "libc/signal/signal.h",
  "libc/signal/sigprocmask.c",
  "libc/signal/sigset.h",
  "libc/std/chmod.c",
  "libc/std/endian.h",
  "libc/std/environ.h",
  "libc/std/errno.h",
  "libc/std/fchmodat.c",
  "libc/std/fchownat.c",
  "libc/std/getrandom.c",
  "libc/std/int.h",
  "libc/std/link.c",
  "libc/std/mkdir.c",
  "libc/std/mkfifo.c",
  "libc/std/mkdir_parents.c",
  "libc/std/mknod.c",
  "libc/std/random.h",
  "libc/std/stdarg.h",
  "libc/std/std.h",
  "libc/std/symlink.c",
  "libc/std/umask.c",
  "libc/std/unlink.c",
  "libc/std/utimensat.c",
  "libc/stdio/popen.c",
  "libc/stdio/rename.c",
  "libc/stdio/stdio.h",
  "libc/stdio/stdio.c",
  "libc/stdlib/abort.c",
  "libc/stdlib/_exit.c",
  "libc/stdlib/alloc.c",
  "libc/stdlib/alloc.h",
  "libc/stdlib/atoi.c",
  "libc/stdlib/getenv.c",
  "libc/stdlib/qsort.c",
  "libc/stdlib/strtod.c",
  "libc/stdlib/strtol.c",
  "libc/stdlib/strtoul.c",
  "libc/stdlib/system.c",
  "libc/string/bytelen.c",
  "libc/string/fmt.h",
  "libc/string/mem_cmp.c",
  "libc/string/mem_copy.c",
  "libc/string/mem_set.c",
  "libc/string/str_byte_copy.c",
  "libc/string/str_byte_move.c",
  "libc/string/str_cat.c",
  "libc/string/str_chr.c",
  "libc/string/str_chr_r.c",
  "libc/string/str_cmp.c",
  "libc/string/str_cmp_n.c",
  "libc/string/str_copy.c",
  "libc/string/str_copy_fmt.c",
  "libc/string/str_cspn.c",
  "libc/string/str_eq.c",
  "libc/string/str_eq_n.c",
  "libc/string/str_get_substr_at.c",
  "libc/string/str_hash.c",
  "libc/string/str_new.c",
  "libc/string/str_new_with_fmt.c",
  "libc/string/str_str.c",
  "libc/string/str_tok.c",
  "libc/string/str_tok.h",
  "libc/string/string.c",
  "libc/string/string.h",
  "libc/string/string_alloc.c",
  "libc/string/string_append_with_len.c",
  "libc/string/string_insert_at_with_len.c",
  "libc/string/string_release_bytes.c",
  "libc/string/vsnprintf.c",
  "libc/string/vsnprintf.h",
  "libc/sys/brk.c",
  "libc/sys/epoll.c",
  "libc/sys/epoll.h",
  "libc/sys/ev.c",
  "libc/sys/ev.h",
  "libc/sys/event.c",
  "libc/sys/event.h",
  "libc/sys/fstat.c",
  "libc/sys/getdents.c",
  "libc/sys/ioctl.c",
  "libc/sys/ioctl.h",
  "libc/sys/lstat.c",
  "libc/sys/mmap.c",
  "libc/sys/mmap.h",
  "libc/sys/mount.c",
  "libc/sys/mount.h",
  "libc/sys/pid.h",
  "libc/sys/process.c",
  "libc/sys/process.h",
  "libc/sys/stat.c",
  "libc/sys/stat.h",
  "libc/sys/sysinfo.c",
  "libc/sys/sysinfo.h",
  "libc/sys/types.h",
  "libc/sys/uname.c",
  "libc/sys/uname.h",
  "libc/sys/waitpid.c",
  "libc/sys/waitstatus.h",
  "libc/syscall/syscall.c",
  "libc/term/term.c",
  "libc/term/term.h",
  "libc/term/term_getkey.c",
  "libc/time/clock_gettime.c",
  "libc/time/clock_settime.c",
  "libc/time/gettimeofday.c",
  "libc/time/gmtime.c",
  "libc/time/localtime.c",
  "libc/time/nanosleep.c",
  "libc/time/sleep.c",
  "libc/time/strftime.c",
  "libc/time/time.c",
  "libc/time/time.h",
  "libc/time/tp2tm.c",
  "libc/time/tzset.c",
  "libc/unistd/access.c",
  "libc/unistd/close.c",
  "libc/unistd/dup.c",
  "libc/unistd/dup2.c",
  "libc/unistd/execve.c",
  "libc/unistd/fcntl.c",
  "libc/unistd/fcntl.h",
  "libc/unistd/fd.c",
  "libc/unistd/flock.c",
  "libc/unistd/fork.c",
  "libc/unistd/getcwd.c",
  "libc/unistd/getegid.c",
  "libc/unistd/geteuid.c",
  "libc/unistd/getgid.c",
  "libc/unistd/getpgid.c",
  "libc/unistd/getpid.c",
  "libc/unistd/getuid.c",
  "libc/unistd/isatty.c",
  "libc/unistd/lseek.c",
  "libc/unistd/open.c",
  "libc/unistd/pipe.c",
  "libc/unistd/read.c",
  "libc/unistd/readlink.c",
  "libc/unistd/setpgid.c",
  "libc/unistd/setsid.c",
  "libc/unistd/tcgetattr.c",
  "libc/unistd/tcsetattr.c",
  "libc/unistd/termios.h",
  "libc/unistd/unistd.h",
  "libc/unistd/write.c",
  "libc/utf8/utf8.c",
  "libc/utf8/utf8.h",
  "libc/utf8/utf8_case.c",
  "libc/utf8/utf8_character.c",
  "libc/utf8/utf8_charlen.c",
  "libc/utf8/utf8_code.c",
  "libc/utf8/utf8_encode.c",
  "libc/utf8/utf8_get_nth_character.c",
  "libc/utf8/utf8_len.c",
  "libc/utf8/utf8_string_after_nth_char.c",
  "libc/utf8/utf8_validate.c",
  "libc/utf8/utf8_width.c"])

return m
